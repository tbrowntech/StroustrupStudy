Review

    1. What do we mean by "Programming is understanding"? - When someone is able 
    to write a program for something, it shows that they truly understand it. 
    Programming is more than just writing code. You don't just come up with an 
    idea and start to write a program. You should take the time to design it,
    etc.

    2. Write a short analysis of what the calculator should be able to do. - The 
    calculator should be able to take an integer or float and perform 
    mathematical calculcations such as addition, subtraction, division, and 
    multipllication. It would be able to use parentheses to help with the order
    of operations. An input should produce an output.

    3. How do you break a problem up into smaller manageable parts? - You 
    organize the parts that go together and work on those methodically. You 
    solve the parts that can be solved first and then work on the other parts, 
    much like splitting a program up into separate functions.

    4. Why is creating a small, limited version of a program a good idea? - This 
    will get you started with what needs to happen. This allows for testing to 
    take place because you can test the small parts as you go. 

    5. Why is feature creep a bad idea? - This ads more to the program than is 
    necessary and allows more possibilities for errors to arise.

    6. What are the three main phases of software development? - Analysis, 
    design, and implementation.

    7. What is a use case? - It is how a particular part of a program is going 
    to be used. According to the glossary: a specific (typically simple) use of
    a program meant to test its functionality and demonstrate its purpose.

    8. What is the purpose of testing? - Testing helps you to avoid bugs and 
    errors before the code gets sent to production.

    9. According to the outline in the chapter, describe the difference between
    a Term, and Expression, a Number, and a Primary. - A number is a floating
    -point-literal. A primary is a number or '(' followed by an expression 
    followed by ')'. 

    10. Break down (17+4)(5-1). - ( is a primary, 17 + 4 is an expression, ) is 
    a primary, * is a term ( is a primary, 5 - 1 is an expression, ) is a 
    primary.

    11. Why does the program not have a function called number()? - For a couple
    reasons. One: because number is a grammar, two: because number is not very
    descriptive for a function in this case. 

    12. What is a token? - A token is a sequence of characters that represents 
    something we consider a unit, such as a number or an operator. 

    13. What is a grammar? A grammar rule? - A set of instructions about how to 
    write statements that are valid. Specify how characters and words can be put
    one after the other, to form valid statements. 

    14. What is a class? What do we use classes for? - A user-defined type that 
    may contain data members, function members, and member types. Used to create
    and manage new objects and support inheritance. 

    15. How can we provide a default value for a member of a class? - By writing
    an initializer. 

    16. In the expression function, why is the default for the switch
    -statement to "put back" the token? - 